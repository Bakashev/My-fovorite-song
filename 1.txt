git ssh-keygen -t rsa -C "Bakashev" - создание открытого и закрытого ключа (-t rsa - указывается алгоритм шифрования, -С - для создания комментараия)
git config - с помощью его задаются параметры для подписи (одни из используемых параметров user.name and user.email) при использовании параметра global перед параметром 
	созданный параметр будет применяться для всех проектов
cd - переход в дерритокрию (пример cd /d/work/Git) - все значения задаются без пробела
ls - проверка с отбражением того что перешли в нужную дерикторию
Shift insert - вставка скопированного текста из буфера
git remote -v  - отображает информацию о месте хранения оригинала проекта
git clone - создание клона проекта на локальном компьютере
git status - показывает статус не сенхранизированных файлов локальных и размещенных в мастер ситеме GitHub
git add  - после ввода команды указываем имя файла который необходимо добавить в commit
 git restore - отмена изменений
git commit -m -  фиксирование изменений -m не обязателен позволяет отправить сообщение
git log  - просмотр истории commmit
git push - синхронизация локальной версии и удаленной
git pull - синхранизацию eудаленной и ли вставку новых файлов заменяет git first and git merge
git gui& - позволяет открыть графический редактор Gui & отрывает без закрытия GrtBrush (консольный режим)
gitk& - открывается визульнай инструмент для просмотра истории
git show -s --pretty=raw xxxxx - информация о commit xxxx униальный код commit можно вводить начальные значения
git ls-tree ххххх- информация на какие blob ссылается дерево (blob минимальная единица хранения лежит ссылка на имя файла)
git show xxxx - открывает конкретный commit по введенному коду blob 
git checkout --<File> (git restore <File>) - отменяет все изменения выбранного файла (при вводе имя фала важно соблюдать регист имя должно полностью совподать)
		функция работает только для опубликованных файлов новые файлы удалять с помощью команды  git clean
git checkout . (git restore .) - отменяет все изменения в категрии в которой находимся (отменить отмену нельзя, после выбора операции все изменения будут удалены без возвратно) 
git clean -xdf - обязатльный флаг f без него удаления не будет, x игнорировать потанциально правило git ignore d удалять дериктории если они неизвестны git
git reset HEAD(^^) аналог HEAD~2 - при использовании ^ необходимо укзать столько ^ сколько commit назад мы хоти удалить при использовании ~ указывается число
git commit --amend -m "commit" - добавляем к последнему commit новыеизменения (можно воспользоваться git gui и внести изменения там)
git reset --soft HEAD(^^)  or ~ - переводит указанное количество commit в index
git reset - mixed  HEAD(^^)  or ~ - переводит commit в файловую систему 
git reset --hard HEAD(^^)  or - удаляет от о всюду и из фаловой системы в том числе (пользоваться очень аккуратно)
отмена действия когда уже выполнили операцию git push
git revert (полный или частичный номер commit (sheone) можно посмотреть на GitHub или посмотреть код через git log) - после нажатия откроется окно редактирования, для начала 
внесения редактирования надо нажать Insert
.gitignore - создается файл с именем .gitignore в него записываются команды для чтениея
	*.log - игнорирует все файлы с расширением log
	!error.log - при условии игнорирования всех файлов с расширением log, учитывает измеения файла error.log
	/todo - скрывается директория
	build/ - скрываются все файлы в директории
	doc/**/*.pdf - 

branch - делать разветление commita
git branch --all - просмотр всех веток
marge - делать объединение дополнительной ветки с основной
виды merge
1. fast-forword merge - передвижение признака HEAD с ветки master на Head созданной ветки
создание новой ветки 1. git checkout -b feature - создаем новую ветку и перключаемся на нее иил 2. git branch feature - создаем новую ветку git checkout feature - переключаемся на нее
git checkout master - переключение на ветку master
git merge feature - команда выполняется в той ветке в которую мы хоти добавить наши изменения, после merge пишется ветка которую добавляем
2. non fast-forward merge - соединяет изменения с разветленной ветки и добавляет изменения с основной ветки с того момента с которого началось разветление
git merge feature - команда выполняется в той ветке в которую мы хоти добавить наши изменения, после запуска открывается vi,
		 нажимаем :wq, после выполнения создается дополнительный commit в который включены изменения основной ветки и дополнительной

CONFLICT
чем чаще делаются commit тем меньше вероятность возникновения конфликта
git merge --abort - прерывания merge
git checkout --Xours - при выполнении команды в возникшем конфликте мои изменения будут считаться верными и применяться к основному файлу
git checkout --Xtheirs - при выполнении команды в возникшем конфликте чужие изменения будут считаться верными а не мои применяться 
	к основному файлу изменения их

использовать программу User merge tool

REBASE изменение базы, если у меня ответление пошло с комита С потом в мастере появились еще два коммита D и E,
	 операция позволяет поменять ссылку с С на E, тем саммы не делая merge я учитываю изменения других 
!!!!!!золотое правило выполнять команду можно только свои branch не надо делать это для мастера
git rebase master
CHERRY-PICK копирование промежуточного коммита из любого branch  в свои ветки 
git cherry-pick	

TAGS
	git tag version1
	git checkout version1 - переход к commitu вместо sheyon кода использовали тег
	git push --tags - публикация на сервер тегов
	git tags --list - отображает список тегов
STASHING
сохранение работы во временное хранилище
	git stash save "комментарий" - сохраняет измененные файлы вовременной хранилище убирая их из 
		видимости требующей выполнения операции commit
	git stash list - просмотр имеющихся stash
	git stash pop <название Stash>- выполняется обновление фаловой системы сохраненными файлами при этом из stash 
	файлы удаляются
	git stash apply <название Stash> - вфполняется обновление файловой системы без удаление Stash
	git stash drop <название Stash> -  удаляет нужны stash
REMOTES
	git remote -v - просмотр ссылки на репозиторий
	git remote remove <name >- удаляет ссылки на используемый репозиторий, имя к примеру origin
	git remote add origin <новый путь URL на репозиторий> - перед использованием команды необходимо 
			 на GetHub создать новый репозиторий и скопировать его ссылку 
BRANCHING SRTATAGIES


	



 

